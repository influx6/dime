
import (
	"time"
	"sync"
	"github.com/influx6/dime/services"
)


// {{sel "Name"}} implements a dime.MonoByteService for reading from os.Stdin and writing to os.Stdout.
// It allows us expose the stdout as a stream of continouse bytes to be read and written to.
type {{sel "Name"}} struct {
	pub         *services.BytesDistributor
	pubErrs     *services.ErrorDistributor
	maxBuffSize int
	stopped     chan struct{}
	incoming    chan {{sel "Type"}}
	rw          sync.Mutex
	closed      bool
}

// New{{sel "Name"}} returns a new instance of a StdOutService.
func New{{sel "Name"}}(maxReadBufferSize int, maxWaitingTime time.Duration) *{{sel "Name"}} {
	pub := services.NewBytesDistributor(0, maxWaitingTime)
	pubErr := services.NewErrorDistributor(0, maxWaitingTime)

	stdServ := {{sel "Name"}}{
		pub:         pub,
		pubErrs:     pubErr,
		maxBuffSize: maxReadBufferSize,
		stopped:     make(chan struct{}, 0),
		incoming:    make(chan {{sel "Type"}}, 0),
	}

	go stdServ.runReader()

	return &stdServ
}

// Done returns a channel which will be closed once the service is stopped.
func (std *{{sel "Name"}}) Done() <-chan struct{} {
	return std.stopped
}

// Stop ends all operations of the service.
func (std *{{sel "Name"}}) Stop() error {
	std.rw.Lock()
	defer std.rw.Unlock()

	if std.closed {
		return nil
	}

	close(std.stopped)

	// Stop subscription delivery.
	std.pub.Stop()
	std.pubErrs.Stop()

	std.closed = true

	return nil
}

// Write accepts a channel which data will be read from delivery data into the writer.
func (std *{{sel "Name"}}) Write(in <-chan {{sel "Type"}}) error {
	return ErrNotSupported
}

// ReadErrors returns a channel for reading error information to a listener.
func (std *{{sel "Name"}}) ReadErrors() <-chan error {
	mc := make(chan error, 10)

	std.pubErrs.Subscribe(mc)

	return mc
}

// Read returns a channel for sending information to a listener.
func (std *{{sel "Name"}}) Read() (<-chan {{sel "Type"}}, error) {
	mc := make(chan {{sel "Type"}}, 0)

	std.pub.Subscribe(mc)

	return mc, nil
}

// runReader reads continously from the reader provider till io.EOF.
func (std *{{sel "Name"}}) runReader() {
	reader := bufio.NewReader(std.reader)

	t := time.NewTimer(readerCloseCheckDuration)
	defer t.Stop()

	{
		for {
			// Validate that service has not be closed:
			select {
			case <-std.stopped:
				return
			case <-t.C:
				t.Reset(readerCloseCheckDuration)
				break
			}

			buf := make({{sel "Type"}}, std.maxBuffSize)

			// Add implementation details

			std.pub.Publish(buf)
			buf = nil
		}
	}
}
